{"version":3,"file":"index.js","sources":["../components/TopicFunction.js","../template/index.js"],"sourcesContent":["/*\r\n * This component returns a block of functions that user can use to send messages to specific topic.\r\n * As input it requires a list of Channel models from the parsed AsyncAPI document\r\n */\r\nexport function TopicFunction({ channels }) {\r\n    const topicsDetails = getTopics(channels)\r\n    let functions = ''\r\n  \r\n    topicsDetails.forEach((t) => {\r\n      functions += `public void send${t.name}(String id) {\r\n        String topic = \"${t.topic}\";\r\n        try {\r\n            MqttMessage message = new MqttMessage(id.getBytes());\r\n            client.publish(topic, message);\r\n            System.out.println(\"Temperature change sent: \" + id);\r\n        } catch (MqttException e) {\r\n            e.printStackTrace();\r\n        }\r\n        }`\r\n    })\r\n  \r\n    return functions\r\n  }\r\n  \r\n  /*\r\n   * This function returns a list of objects, one for each channel with two properties, name and topic\r\n   * name - holds information about the operationId provided in the AsyncAPI document\r\n   * topic - holds information about the address of the topic\r\n   *\r\n   * As input it requires a list of Channel models from the parsed AsyncAPI document\r\n   */\r\n  function getTopics(channels) {\r\n    const channelsCanSendTo = channels\r\n    let topicsDetails = []\r\n  \r\n    channelsCanSendTo.forEach((ch) => {\r\n      const topic = {}\r\n      const operationId = ch.operations().filterByReceive()[0].id()\r\n      topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1)\r\n      topic.topic = ch.address()\r\n  \r\n      topicsDetails.push(topic)\r\n    })\r\n  \r\n    return topicsDetails\r\n  }","import { File, Text } from '@asyncapi/generator-react-sdk';\r\nimport { TopicFunction } from '../components/TopicFunction'\r\n\r\nexport default function ({ asyncapi, params }) {\r\n    let channels = asyncapi.channels().filterByReceive();  // Get all the channels that receive messages\r\n\r\n    // Generate Java code for each topic dynamically using TopicFunction\r\n    const topicMethods = TopicFunction({ channels });  // This will return Java methods as text\r\n    \r\n    return (\r\n    <File name=\"client.java\">\r\n      {`import org.eclipse.paho.client.mqttv3.*;\r\n\r\n        public class client {\r\n            private static final String BROKER_URL = \"${asyncapi.servers().get(params.server).url()}\";\r\n            private static final String TOPIC = \"temperature/changed\";\r\n\r\n            private MqttClient client;\r\n\r\n            public client() {\r\n                try {\r\n                    // Generate a unique client ID\r\n                    String clientId = MqttClient.generateClientId();\r\n                    \r\n                    // Create and connect the MQTT client\r\n                    client = new MqttClient(BROKER_URL, clientId);\r\n                    MqttConnectOptions options = new MqttConnectOptions();\r\n                    options.setCleanSession(true);\r\n                    \r\n                    client.connect(options);\r\n                    System.out.println(\"Connected to MQTT broker: \" + BROKER_URL);\r\n                } catch (MqttException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n\r\n            ${topicMethods}\r\n\r\n            public static void main(String[] args) {\r\n                client serviceClient = new client();\r\n                \r\n                // Simulate sending a temperature change\r\n                //serviceClient.sendTemperatureDrop(\"Sensor-1: 25Â°C\");\r\n            }\r\n        }`}\r\n    </File>\r\n  );\r\n}\r\n"],"names":["TopicFunction","channels","topicsDetails","getTopics","functions","forEach","t","name","topic","channelsCanSendTo","ch","operationId","operations","filterByReceive","id","charAt","toUpperCase","slice","address","push","asyncapi","params","topicMethods","_jsx","File","children","servers","get","server","url"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACO,SAASA,aAAaA,CAAC;AAAEC,EAAAA,QAAAA;AAAS,CAAC,EAAE;AACxC,EAAA,MAAMC,aAAa,GAAGC,SAAS,CAACF,QAAQ,CAAC,CAAA;EACzC,IAAIG,SAAS,GAAG,EAAE,CAAA;AAElBF,EAAAA,aAAa,CAACG,OAAO,CAAEC,CAAC,IAAK;AAC3BF,IAAAA,SAAS,IAAI,CAAA,gBAAA,EAAmBE,CAAC,CAACC,IAAI,CAAA;AAC5C,wBAA0BD,EAAAA,CAAC,CAACE,KAAK,CAAA;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAU,CAAA,CAAA;AACN,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOJ,SAAS,CAAA;AAClB,CAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACE,SAASD,SAASA,CAACF,QAAQ,EAAE;EAC3B,MAAMQ,iBAAiB,GAAGR,QAAQ,CAAA;EAClC,IAAIC,aAAa,GAAG,EAAE,CAAA;AAEtBO,EAAAA,iBAAiB,CAACJ,OAAO,CAAEK,EAAE,IAAK;IAChC,MAAMF,KAAK,GAAG,EAAE,CAAA;AAChB,IAAA,MAAMG,WAAW,GAAGD,EAAE,CAACE,UAAU,EAAE,CAACC,eAAe,EAAE,CAAC,CAAC,CAAC,CAACC,EAAE,EAAE,CAAA;AAC7DN,IAAAA,KAAK,CAACD,IAAI,GAAGI,WAAW,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGL,WAAW,CAACM,KAAK,CAAC,CAAC,CAAC,CAAA;AACvET,IAAAA,KAAK,CAACA,KAAK,GAAGE,EAAE,CAACQ,OAAO,EAAE,CAAA;AAE1BhB,IAAAA,aAAa,CAACiB,IAAI,CAACX,KAAK,CAAC,CAAA;AAC3B,GAAC,CAAC,CAAA;AAEF,EAAA,OAAON,aAAa,CAAA;AACtB;;AC1Ca,cAAU,EAAA;EAAEkB,QAAQ;AAAEC,EAAAA,MAAAA;AAAO,CAAC,EAAE;AAC3C,EAAA,IAAIpB,QAAQ,GAAGmB,QAAQ,CAACnB,QAAQ,EAAE,CAACY,eAAe,EAAE,CAAC;;AAErD;EACA,MAAMS,YAAY,GAAGtB,aAAa,CAAC;AAAEC,IAAAA,QAAAA;GAAU,CAAC,CAAC;;EAEjD,oBACAsB,cAAA,CAACC,sBAAI,EAAA;AAACjB,IAAAA,IAAI,EAAC,aAAa;AAAAkB,IAAAA,QAAA,EACrB,CAAA;AACP;AACA;AACA,sDAAA,EAAwDL,QAAQ,CAACM,OAAO,EAAE,CAACC,GAAG,CAACN,MAAM,CAACO,MAAM,CAAC,CAACC,GAAG,EAAE,CAAA;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAA,EAAcP,YAAY,CAAA;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,CAAA;AAAU,GACA,CAAC,CAAA;AAEX;;;;"}